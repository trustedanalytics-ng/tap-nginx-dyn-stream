/**
 * Copyright (c) 2016 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Automatically generated by MockGen. DO NOT EDIT!
// Source: systemUtils.go

package main

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of SystemUtilAPI interface
type MockSystemUtilAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockSystemUtilAPIRecorder
}

// Recorder for MockSystemUtilAPI (not exported)
type _MockSystemUtilAPIRecorder struct {
	mock *MockSystemUtilAPI
}

func NewMockSystemUtilAPI(ctrl *gomock.Controller) *MockSystemUtilAPI {
	mock := &MockSystemUtilAPI{ctrl: ctrl}
	mock.recorder = &_MockSystemUtilAPIRecorder{mock}
	return mock
}

func (_m *MockSystemUtilAPI) EXPECT() *_MockSystemUtilAPIRecorder {
	return _m.recorder
}

func (_m *MockSystemUtilAPI) ExecuteCommand(cmd string) (string, error) {
	ret := _m.ctrl.Call(_m, "ExecuteCommand", cmd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemUtilAPIRecorder) ExecuteCommand(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteCommand", arg0)
}
